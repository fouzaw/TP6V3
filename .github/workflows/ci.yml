# .github/workflows/ci-cd.yml
name: Full DevOps Pipeline

on:
  push:
    branches: [ main ]  # ou "master" selon ta branche

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Récupérer le code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Installer Java 17 et Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Lancer les tests unitaires
      - name: Run tests
        run: mvn test

      # 4. Build l'application (génère le .jar)
      - name: Build with Maven
        run: mvn clean package -DskipTests  # skipTests car déjà lancés

      # 5. Configurer Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Construire et pousser l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/spring-app:latest

      # 7. Déployer sur Kubernetes
      - name: Deploy to Kubernetes
        run: |
          # Installer kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          # Créer le fichier kubeconfig à partir du secret
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

          # Appliquer les manifests
          kubectl apply -f k8s/